# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface MutationAuthResponse {
    code: String!
    message: String
    success: Boolean!
}

type BookTripsResponse implements MutationAuthResponse {
    code: String!
    message: String
    success: Boolean!
    tripsAdded: [Int]
}

type CUDProductResponse implements MutationAuthResponse {
    code: String!
    message: String
    product: Product
    success: Boolean!
}

type CancelTripResponse implements MutationAuthResponse {
    code: String!
    message: String
    success: Boolean!
    trip: Launch
}

type File {
    encoding: String!
    filename: String!
    mimetype: String!
}

type Launch {
    id: ID!
    isBooked: Boolean
    mission: Mission
    rocket: Rocket
    site: String
}

type LaunchConnection {
    cursor: String!
    hasMore: Boolean!
    launches: [Launch]!
}

type LoginResponse implements MutationAuthResponse {
    code: String!
    message: String
    success: Boolean!
    token: String
    user: User
}

type Message {
    content: String!
    createdAt: String!
    createdAtFormated: String!
    from: ID!
    fromData: User
    id: ID!
    to: ID!
    toData: User
}

type Mission {
    missionPatch(size: PatchSize): String
    name: String
}

type Mutation {
    bookTrips(launchIds: [ID]!): BookTripsResponse!
    cancelTrip(launchId: ID!): CancelTripResponse!
    createProduct(data: ProductInput!): CUDProductResponse
    deleteProduct(id: ID!): CUDProductResponse
    login(email: String!, password: String!): LoginResponse!
    loginGoogle(token: String!): LoginResponse!
    reactToMessage(content: String!, messageId: ID!): ReactToMessageResponse!
    register(age: Int!, email: String!, name: String!, password: String!): RegisterAndMeResponse!
    sendMessage(content: String!, to: ID!): SendMessageResponse!
    singleUpload(file: Upload!): File!
    updateProduct(data: ProductInput!, id: ID!): CUDProductResponse
}

type Product {
    createdAt: String!
    createdAtFormated: String
    createdByImg: String
    createdByName: String!
    id: ID!
    image: String
    name: String!
    price: Int!
    stock: Int!
    updatedAt: String!
    updatedAtFormated: String
}

type ProductsResponse implements MutationAuthResponse {
    code: String!
    message: String
    products: [Product]
    success: Boolean!
}

type Query {
    launch(id: ID!): Launch
    launches(
        "If you add a cursor here, it will only return results _after_ this cursor"
        after: String,
        "The number of results to show. Must be >= 1. Default = 20"
        pageSize: Int
    ): LaunchConnection!
    me: RegisterAndMeResponse
    messages(to: ID!): [Message]
    product(id: ID!): Product
    products: [Product]
    uploads: [File]
    user: User
    users: [User]
}

type ReactToMessageResponse implements MutationAuthResponse {
    code: String!
    message: String
    reaction: Reaction
    success: Boolean!
}

type Reaction {
    content: String!
    createdAt: String!
    id: ID!
    message: Message!
}

type RegisterAndMeResponse implements MutationAuthResponse {
    code: String!
    message: String
    success: Boolean!
    user: User
}

type Rocket {
    id: ID!
    name: String
    type: String
}

type SendMessageResponse implements MutationAuthResponse {
    code: String!
    message: String
    messageCreated: Message
    success: Boolean!
}

type Subscription {
    newMessage: Message
    newReaction: Reaction
}

type User {
    age: Int!
    createdAt: String
    createdAtFormated: String
    email: String!
    friends: [User]
    google: Boolean!
    id: ID!
    image: String!
    name: String!
    trips: [Launch]!
    updatedAt: String
    updatedAtFormated: String
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum PatchSize {
    LARGE
    SMALL
}

input ProductInput {
    createdByImg: String
    createdByName: String
    image: String
    name: String
    price: Int
    stock: Int
}


"The `Upload` scalar type represents a file upload."
scalar Upload